// generated by copilot

export type Cell = 0 | 1;
export type Grid = Cell[][];

export const createEmptyGrid = (rows: number, cols: number): Grid => {
  return Array.from({ length: rows }, () => Array(cols).fill(0));
};

export const getNextGeneration = (grid: Grid): Grid => {
  const rows = grid.length;
  const cols = grid[0].length;
  const newGrid = createEmptyGrid(rows, cols);

  const getCell = (x: number, y: number): Cell => {
    if (x < 0 || x >= rows || y < 0 || y >= cols) return 0;
    return grid[x][y];
  };

  for (let x = 0; x < rows; x++) {
    for (let y = 0; y < cols; y++) {
      const neighbors = [
        getCell(x - 1, y - 1), getCell(x - 1, y), getCell(x - 1, y + 1),
        getCell(x, y - 1), getCell(x, y + 1),
        getCell(x + 1, y - 1), getCell(x + 1, y), getCell(x + 1, y + 1),
      ].reduce<number>((a, b) => a + b, 0);

      if (grid[x][y] === 1) {
        newGrid[x][y] = neighbors === 2 || neighbors === 3 ? 1 : 0;
      } else {
        newGrid[x][y] = neighbors === 3 ? 1 : 0;
      }
    }
  }

  return newGrid;
};